/**
 * @api {DELETE} /articles/:id DELETE - Delete Article
 * @apiPermission Admin only
 * @apiVersion 1.0.0
 * @apiName DeleteArticle
 * @apiSampleRequest off
 * @apiGroup Articles
 * @apiDescription  Deletes an article by id
 * @apiHeaderExample {json} Must include Authorization Header:
 *     {
 *       "Authorization": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYTk2N2Q4OGE1ZDJkNTIyYzBkMzExMSIsInJvbGUiOiJwcmltZS1hZG1pbiIsInRrSWQiOiI2MGI0YTA5NTdjMWE2ZjQzOGMxMTRjNjEiLCJyZWZyZXNoVG9rZW4iOiI2MGI0YTA5NTdjMWE2ZjQzOGMxMTRjNjIiLCJpYXQiOjE2MjI0NTAzMjUsImV4cCI6MTYyMjQ1MjEyNX0.HJ3eJsyIIFg3snqU_c0ZCtE6TLSZ8BH-_uk8fGQdvEI"
 *     }
 * @apiParam (Request parameters) {String} id Article Unique ID.
 * @apiSuccessExample Example Response
    {
        "success": true,
        "article": {
            "likes": [],
            "comments": [],
            "title": "Test Article",
            "content": "Test content",
            "author": "60a967d88a5d2d522c0d3111",
            "createdAt": "2021-05-31T15:00:32.135Z",
            "updatedAt": "2021-05-31T15:00:32.135Z",
            "id": "60b4fa10ded55343745e29d9"
        }
    }
 * @apiSuccess {Boolean} success Indicates that the article was deleted.
 * @apiSuccess {String[]} article[likes] Article likes
 * @apiSuccess {String[]} article[comments] Article comments
 * @apiSuccess {String} article[content] Article content
 * @apiSuccess {String} article[author] Article author (user id)
 * @apiSuccess {String} article[id] Article id
 * @apiSuccess {String} article[createdAt] Article created at time - auto-generated by Mongo
 * @apiSuccess {String} article[updatedAt] Article updated at time - auto-generated by Mongo
 * @apiError (Error 400) InvalidObjectID <code>Please provide a valid object id.</code>
 * @apiError (Error 400) AuthorizationRequired  <code>The authorization header is required.</code>
 * @apiError (Error 401) NotAuthorized  <code>You are not authorized.</code>
 * @apiError (Error 401) RefreshTokenExpired <code>Refresh token has expired.</code>
 * @apiError (Error 401) AccessTokenExpired <code>Access token has expired.</code>
 * @apiError (Error 404) AccountNotFound <code>Account not found.</code>
 * @apiError (Error 404) ResourceNotFound <code>Resource not found.</code>
 * @apiErrorExample {json} Example Error Response:
    {
        "errors": [
            {
                "message": "Resource not found.",
                "errorType": "ResourceNotFound",
                "statusCode": 404
            }
        ]
    }
 */
